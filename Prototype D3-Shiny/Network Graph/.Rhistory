install.packages(c("plyr","ggplot2"))
test<-ldply(edge_list, summarise, source=function(e){e["source"]})
library(plyr)
test<-ldply(edge_list, summarise, source=function(e){e["source"]})
setwd("Documents/Projects/Community Detection/Prototype D3-Shiny/Network Graph")
file<-"data/football.xml"
graph<-xmlRoot(xmlTreeParse(file))[["graph"]]
nodes<-xmlElementsByTagName(graph, "node")
edges<-xmlElementsByTagName(graph, "edge")
node_list<-list()
for(i in 1:length(nodes)){
id<-xmlGetAttr(nodes[[i]], "id")
data<-xmlElementsByTagName(nodes[[i]], "data")
data_list<-list()
for(j in 1:length(data)) {
data_list[[xmlGetAttr(data[[j]],"key")]]<-xmlValue(data[[j]])
}
node_list[[i]]<-cbind(id, data.frame(data_list))
}
require(XML)
require(rjson)
graph<-xmlRoot(xmlTreeParse(file))[["graph"]]
nodes<-xmlElementsByTagName(graph, "node")
edges<-xmlElementsByTagName(graph, "edge")
node_list<-list()
for(i in 1:length(nodes)){
id<-xmlGetAttr(nodes[[i]], "id")
data<-xmlElementsByTagName(nodes[[i]], "data")
data_list<-list()
for(j in 1:length(data)) {
data_list[[xmlGetAttr(data[[j]],"key")]]<-xmlValue(data[[j]])
}
node_list[[i]]<-cbind(id, data.frame(data_list))
}
edge_list <- lapply(1:length(edges),function(i) c(source=xmlGetAttr(edges[[i]],"source"), target=xmlGetAttr(edges[[i]],"target")))
test<-ldply(edge_list, summarise, source=function(e){e["source"]})
is.list(edge_list)
ldply(edge_list)
head(ldply(node_list))
apply(ldply(edge_list), 1, function(x){which[ldply(node_list)$id == x$source]}
)
names(ldply(edge_list))
apply(ldply(edge_list), 1, function(x){which[ldply(node_list)$id == x[,"source"]})
apply(ldply(edge_list), 1, function(x){which[ldply(node_list)$id == x[,"source"]]})
apply(ldply(edge_list), 1, function(x){which[ldply(node_list)$id == x["source"]]})
== x["source"]]})
?which
which[ldply(node_list)$id == ldply(edge_list)[1,"source"]]
which[ldply(node_list)[,"id"] == ldply(edge_list)[1,"source"]]
test.n<-ldply(node_list)
test.e<-ldply(edge_list)
apply(ldply(edge_list), 1, function(x){which(ldply(node_list)[,"id"] == x["source"])})
which(test.n$id == test.e[1,"source"])
which(test.n$id == test.e[2,"source"])
head(test.e)
e.2<-apply(test.e, 1, function(x) which(test.n$id == x["source"]))
head(e.2)
e.2<-data.frame(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])))
head(e.2)
e.2<-data.frame(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1))
e.2
e.2<-list(c(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1))))
e.2<-list(c(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1)))
e.2
e.2<-dlply(data.frame(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1)))
?dlply
e.2<-data.frame(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1)))
e.2<-data.frame(source=apply(test.e, 1, function(x) which(test.n$id == x["source"])-1),
target=apply(test.e, 1, function(x) which(test.n$id == x["target"])-1))
edge_list.2<-split(e.2, 1:nrow(e.2))
head(edge_list.2)
head(edge_list)
merge_lists<-list()
merge_lists$nodes<-node_list
merge_lists$edges<-edge_list.2
head(merge_lists)
toJSON(merge_lists)
